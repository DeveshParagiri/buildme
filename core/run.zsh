# --- run.zsh ---
#
# This script defines functions for executing shell commands generated by the
# 'buildme' tool. It provides both batch execution and stepwise execution
# options, allowing users to review and confirm each command before it runs.
#
# Features:
# - `buildme_run`: Executes a batch of commands after user confirmation.
# - `buildme_run_stepwise`: Executes commands one at a time, with user prompts
#   for each command to confirm, skip, run all, or quit.
# - Logs each session with a timestamp, original request, and generated commands
#   to `~/.last_buildme_session.sh`.
#
# Usage:
# - Use `buildme_run` to execute all commands in one go after confirmation.
# - Use `buildme_run_stepwise` to execute commands interactively, one by one.
#
# Dependencies:
# - Requires a writable home directory for logging session data.

buildme_run() {
  local script="$1"
  local original_request="$2"
  echo ""
  echo "❓ Do you want to run these commands? [y/N]"
  read -r confirm
  if [[ "$confirm" =~ ^[Yy]$ ]]; then
    echo ""
    cat >> ~/.last_buildme_session.sh << EOF
# Session entry $(date '+%Y-%m-%d %H:%M:%S')
TIMESTAMP="$(date '+%Y-%m-%d %H:%M:%S')"
ORIGINAL_REQUEST="$original_request"
GENERATED_COMMANDS="$script"

EOF
    eval "$script"
  else
    echo "🚫 Skipped running commands."
  fi
}

buildme_run_stepwise() {
  local script="$1"
  local original_request="$2"
  
  cat >> ~/.last_buildme_session.sh << EOF
# Session entry $(date '+%Y-%m-%d %H:%M:%S')
TIMESTAMP="$(date '+%Y-%m-%d %H:%M:%S')"
ORIGINAL_REQUEST="$original_request"
GENERATED_COMMANDS="$script"

EOF

  exec 3<&0
  local run_all=0

  echo "$script" | sed 's/ && /\n/g' | while IFS= read -r line; do
    [[ -z "$line" ]] && continue

    line=$(echo "$line" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
    [[ -z "$line" ]] && continue

    echo "➡️  $line"
    echo -n "❓ Run this? [y/N/a/q] "
    read -r confirm <&3

    case "$confirm" in
      [Yy]|"") eval "$line" ;;
      [Nn]) echo "⏭️  Skipped." ;;
      [Aa]) run_all=1; eval "$line" ;;
      [Qq]) echo "👋 Exiting"; break ;;
      *) echo "❓ Unknown choice, skipping." ;;
    esac
    echo ""
  done

  exec 0<&3
}